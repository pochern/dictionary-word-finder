{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/polinac/Projects/dictionary-word-finder/frontend/src/components/SearchDictionary.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { fade, makeStyles } from '@material-ui/core/styles';\nimport { fetchDefinitions } from '../utils/api';\nimport { addDefinition } from '../actions';\nimport Button from '@material-ui/core/Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport SearchIcon from '@material-ui/icons/Search';\nimport InputBase from '@material-ui/core/InputBase';\nimport Typography from '@material-ui/core/Typography';\nimport WordList from './WordList';\nconst useStyles = makeStyles(theme => ({\n  search: {\n    position: 'relative',\n    borderRadius: theme.shape.borderRadius,\n    backgroundColor: fade(theme.palette.common.black, 0.15),\n    '&:hover': {\n      backgroundColor: fade(theme.palette.common.black, 0.25)\n    },\n    marginRight: theme.spacing(2),\n    width: '100%',\n    [theme.breakpoints.up('sm')]: {\n      width: 'fit-content'\n    }\n  },\n  searchIcon: {\n    padding: theme.spacing(0, 2),\n    height: '100%',\n    position: 'absolute',\n    pointerEvents: 'none',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  inputRoot: {\n    color: 'inherit'\n  },\n  inputInput: {\n    padding: theme.spacing(1, 1, 1, 0),\n    // vertical padding + font size from searchIcon\n    paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\n    transition: theme.transitions.create('width'),\n    width: '100%',\n    [theme.breakpoints.up('md')]: {\n      width: '20ch'\n    }\n  }\n}));\n\nfunction SearchDictionary() {\n  _s();\n\n  const classes = useStyles();\n  const [inputValue, setInputValue] = useState('');\n  const [searchText, setSearchText] = useState('');\n  const [definitions, setDefinitions] = useState([]);\n  const [loadingResults, setLoadingResults] = useState(false);\n  const dispatch = useDispatch();\n\n  const searchWord = () => {\n    if (inputValue === '') {\n      return;\n    }\n\n    setSearchText(inputValue);\n    setLoadingResults(true);\n    console.log('INPUT VALUE', inputValue);\n    console.log('SEARCH TEXT', searchText);\n    fetchDefinitions(inputValue).then(data => {\n      console.log('DAT DATAAAA', data.definitions.map(definition => console.log(definition))); // data.definitions && data.definitions.map((definition) => setDefinitions(data))\n\n      setDefinitions([]);\n      setLoadingResults(false);\n    });\n  };\n\n  console.log('DAT DICTIONARY', definitions);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        marginBottom: '2em'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.search,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.searchIcon,\n          children: /*#__PURE__*/_jsxDEV(SearchIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(InputBase, {\n          placeholder: \"Search\\u2026\",\n          classes: {\n            root: classes.inputRoot,\n            input: classes.inputInput\n          },\n          inputProps: {\n            'aria-label': 'search'\n          },\n          onChange: e => setInputValue(e.target.value),\n          value: inputValue\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => searchWord(),\n        variant: \"contained\",\n        color: \"primary\",\n        children: \"Search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: loadingResults === true ? /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          style: {\n            marginBottom: '2em'\n          },\n          children: \"Search Results\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 15\n        }, this), searchText !== '' && /*#__PURE__*/_jsxDEV(WordList, {\n          word: searchText,\n          definitions: definitions,\n          onFavorite: definition => {\n            dispatch(addDefinition({\n              definition,\n              searchText\n            }));\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n}\n\n_s(SearchDictionary, \"LaomK6/AchtkwMbZPS8VSnPQBYw=\", false, function () {\n  return [useStyles, useDispatch];\n});\n\n_c = SearchDictionary;\nexport default SearchDictionary;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchDictionary\");","map":{"version":3,"sources":["/Users/polinac/Projects/dictionary-word-finder/frontend/src/components/SearchDictionary.js"],"names":["React","useState","useDispatch","fade","makeStyles","fetchDefinitions","addDefinition","Button","CircularProgress","SearchIcon","InputBase","Typography","WordList","useStyles","theme","search","position","borderRadius","shape","backgroundColor","palette","common","black","marginRight","spacing","width","breakpoints","up","searchIcon","padding","height","pointerEvents","display","alignItems","justifyContent","inputRoot","color","inputInput","paddingLeft","transition","transitions","create","SearchDictionary","classes","inputValue","setInputValue","searchText","setSearchText","definitions","setDefinitions","loadingResults","setLoadingResults","dispatch","searchWord","console","log","then","data","map","definition","marginBottom","root","input","e","target","value"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { fade, makeStyles } from '@material-ui/core/styles'\nimport { fetchDefinitions } from '../utils/api'\nimport { addDefinition } from '../actions'\nimport Button from '@material-ui/core/Button'\nimport CircularProgress from '@material-ui/core/CircularProgress'\nimport SearchIcon from '@material-ui/icons/Search'\nimport InputBase from '@material-ui/core/InputBase'\nimport Typography from '@material-ui/core/Typography'\nimport WordList from './WordList'\n\nconst useStyles = makeStyles((theme) => ({\n  search: {\n    position: 'relative',\n    borderRadius: theme.shape.borderRadius,\n    backgroundColor: fade(theme.palette.common.black, 0.15),\n    '&:hover': {\n      backgroundColor: fade(theme.palette.common.black, 0.25)\n    },\n    marginRight: theme.spacing(2),\n    width: '100%',\n    [theme.breakpoints.up('sm')]: {\n      width: 'fit-content'\n    }\n  },\n  searchIcon: {\n    padding: theme.spacing(0, 2),\n    height: '100%',\n    position: 'absolute',\n    pointerEvents: 'none',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  inputRoot: {\n    color: 'inherit'\n  },\n  inputInput: {\n    padding: theme.spacing(1, 1, 1, 0),\n    // vertical padding + font size from searchIcon\n    paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\n    transition: theme.transitions.create('width'),\n    width: '100%',\n    [theme.breakpoints.up('md')]: {\n      width: '20ch'\n    }\n  }\n}))\n\nfunction SearchDictionary () {\n  const classes = useStyles()\n  const [inputValue, setInputValue] = useState('')\n  const [searchText, setSearchText] = useState('')\n  const [definitions, setDefinitions] = useState([])\n  const [loadingResults, setLoadingResults] = useState(false)\n\n  const dispatch = useDispatch()\n\n  const searchWord = () => {\n    if (inputValue === '') {\n      return\n    }\n\n    setSearchText(inputValue)\n    setLoadingResults(true)\n    console.log('INPUT VALUE', inputValue)\n    console.log('SEARCH TEXT', searchText)\n\n    fetchDefinitions(inputValue)\n      .then(data => {\n        console.log('DAT DATAAAA', data.definitions.map((definition) => console.log(definition)))\n        // data.definitions && data.definitions.map((definition) => setDefinitions(data))\n        setDefinitions([])\n        setLoadingResults(false)\n      })\n  }\n\n  console.log('DAT DICTIONARY', definitions)\n  return (\n    <div>\n      <div style={{ display: 'flex', marginBottom: '2em' }}>\n        <div className={classes.search}>\n          <div className={classes.searchIcon}>\n            <SearchIcon />\n          </div>\n          <InputBase\n            placeholder=\"Search…\"\n            classes={{\n              root: classes.inputRoot,\n              input: classes.inputInput\n            }}\n            inputProps={{ 'aria-label': 'search' }}\n            onChange={(e) => setInputValue(e.target.value)}\n            value={inputValue}\n          />\n        </div>\n        <Button\n          onClick={() => searchWord()}\n          variant=\"contained\"\n          color=\"primary\"\n        >\n          Search\n        </Button>\n      </div>\n      <div>\n        {loadingResults === true\n          ? <CircularProgress />\n          : <div>\n              <Typography variant='h6' style={{ marginBottom: '2em' }}>\n                Search Results\n              </Typography>\n              {searchText !== '' && (\n                <WordList\n                  word={searchText}\n                  definitions={definitions}\n                  onFavorite={(definition) => {\n                    dispatch(addDefinition({ definition, searchText }))\n                  }}\n                />)}\n            </div>}\n      </div>\n    </div>\n  )\n}\n\nexport default SearchDictionary\n"]},"metadata":{},"sourceType":"module"}